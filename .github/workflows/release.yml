name: Release Build

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:  # Allow manual trigger for testing

jobs:
  build-dmg:
    runs-on: macos-14

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install xcodegen
        run: brew install xcodegen

      - name: Generate Xcode project
        run: xcodegen generate

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Run tests
        run: swift test

      # Code signing (commented out - uncomment when ready)
      # - name: Import Code Signing Certificate
      #   env:
      #     P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
      #     CERTIFICATE_BASE64: ${{ secrets.CERTIFICATE_BASE64 }}
      #   run: |
      #     # Create temporary keychain
      #     KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
      #     KEYCHAIN_PASSWORD=$(openssl rand -base64 32)
      #
      #     security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
      #     security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
      #     security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
      #
      #     # Import certificate
      #     echo "$CERTIFICATE_BASE64" | base64 --decode > certificate.p12
      #     security import certificate.p12 -k "$KEYCHAIN_PATH" -P "$P12_PASSWORD" -T /usr/bin/codesign
      #     security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
      #
      #     # Set as default keychain
      #     security list-keychains -d user -s "$KEYCHAIN_PATH"
      #     rm certificate.p12

      # - name: Build and sign app
      #   env:
      #     DEVELOPMENT_TEAM: ${{ secrets.DEVELOPMENT_TEAM }}
      #     CODE_SIGN_IDENTITY: ${{ secrets.CODE_SIGN_IDENTITY }}
      #   run: |
      #     xcodebuild -project MusicAssistantPlayer.xcodeproj \
      #       -scheme MusicAssistantPlayer \
      #       -configuration Release \
      #       -derivedDataPath build \
      #       CODE_SIGN_IDENTITY="$CODE_SIGN_IDENTITY" \
      #       DEVELOPMENT_TEAM="$DEVELOPMENT_TEAM" \
      #       CODE_SIGN_STYLE=Manual \
      #       clean build

      # For now, build without signing
      - name: Build app (unsigned)
        run: |
          xcodebuild -project MusicAssistantPlayer.xcodeproj \
            -scheme MusicAssistantPlayer \
            -configuration Release \
            -derivedDataPath build \
            -onlyUsePackageVersionsFromResolvedFile \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            clean build

      - name: Create DMG
        run: ./scripts/create-dmg.sh

      # Notarization (commented out - uncomment when ready)
      # - name: Notarize DMG
      #   env:
      #     APPLE_ID: ${{ secrets.APPLE_ID }}
      #     APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
      #     TEAM_ID: ${{ secrets.TEAM_ID }}
      #   run: |
      #     DMG_FILE=$(ls MusicAssistantPlayer-*.dmg)
      #
      #     # Submit for notarization
      #     xcrun notarytool submit "$DMG_FILE" \
      #       --apple-id "$APPLE_ID" \
      #       --password "$APPLE_ID_PASSWORD" \
      #       --team-id "$TEAM_ID" \
      #       --wait
      #
      #     # Staple the notarization ticket
      #     xcrun stapler staple "$DMG_FILE"

      - name: Upload DMG artifact
        uses: actions/upload-artifact@v4
        with:
          name: MusicAssistantPlayer-DMG
          path: MusicAssistantPlayer-*.dmg
          retention-days: 90

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: MusicAssistantPlayer-*.dmg
          draft: true
          generate_release_notes: true
          body: |
            ## Installation

            1. Download `MusicAssistantPlayer-*.dmg`
            2. Open the DMG file
            3. Drag Music Assistant Player to Applications folder
            4. On first run, right-click the app and select "Open" (unsigned app warning)

            ## Requirements

            - macOS 14.0 or later
            - Music Assistant server (running locally or remotely)

            ---

            **Note:** This build is unsigned. Future releases will include code signing and notarization.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
